/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutUsersIndexImport } from './routes/_layout/users/index'
import { Route as LayoutUsersUserIdAlbumsIndexImport } from './routes/_layout/users/$userId/albums/index'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUsersIndexRoute = LayoutUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUsersUserIdAlbumsIndexRoute =
  LayoutUsersUserIdAlbumsIndexImport.update({
    id: '/users/$userId/albums/',
    path: '/users/$userId/albums/',
    getParentRoute: () => LayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/users/': {
      id: '/_layout/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof LayoutUsersIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/users/$userId/albums/': {
      id: '/_layout/users/$userId/albums/'
      path: '/users/$userId/albums'
      fullPath: '/users/$userId/albums'
      preLoaderRoute: typeof LayoutUsersUserIdAlbumsIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutUsersIndexRoute: typeof LayoutUsersIndexRoute
  LayoutUsersUserIdAlbumsIndexRoute: typeof LayoutUsersUserIdAlbumsIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutUsersIndexRoute: LayoutUsersIndexRoute,
  LayoutUsersUserIdAlbumsIndexRoute: LayoutUsersUserIdAlbumsIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/': typeof LayoutIndexRoute
  '/users': typeof LayoutUsersIndexRoute
  '/users/$userId/albums': typeof LayoutUsersUserIdAlbumsIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/': typeof LayoutIndexRoute
  '/users': typeof LayoutUsersIndexRoute
  '/users/$userId/albums': typeof LayoutUsersUserIdAlbumsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/users/': typeof LayoutUsersIndexRoute
  '/_layout/users/$userId/albums/': typeof LayoutUsersUserIdAlbumsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/'
    | '/users'
    | '/users/$userId/albums'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/' | '/users' | '/users/$userId/albums'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/signup'
    | '/_layout/'
    | '/_layout/users/'
    | '/_layout/users/$userId/albums/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login",
        "/signup"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/users/",
        "/_layout/users/$userId/albums/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/users/": {
      "filePath": "_layout/users/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/users/$userId/albums/": {
      "filePath": "_layout/users/$userId/albums/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
