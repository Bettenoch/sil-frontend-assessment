// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  GetAlbumsData,
  GetAlbumsResponse,
  CreateAlbumData,
  CreateAlbumResponse,
  GetAlbumData,
  GetAlbumResponse,
  UpdateAlbumData,
  UpdateAlbumResponse,
  DeleteAlbumData,
  DeleteAlbumResponse,
  GetAllAlbumPhotosData,
  GetAllAlbumPhotosResponse,
  GetPhotoIdData,
  GetPhotoIdResponse,
  GetAllPhotosData,
  GetAllPhotosResponse,
  HealthCheckResponse,
  UserLoginAccessTokenData,
  UserLoginAccessTokenResponse,
  TestTokenResponse,
  CreatePhotoData,
  CreatePhotoResponse,
  GetAllPhotosInAnAlbumData,
  GetAllPhotosInAnAlbumResponse,
  GetPhotoData,
  GetPhotoResponse,
  UpdatePhotoData,
  UpdatePhotoResponse,
  DeletePhotoData,
  DeletePhotoResponse,
  GetAllUserAlbumsData,
  GetAllUserAlbumsResponse,
  GetAlbumIdData,
  GetAlbumIdResponse,
  GetAllUsersData,
  GetAllUsersResponse,
  CreateUserData,
  CreateUserResponse,
  CreateAccountData,
  CreateAccountResponse,
  UpdateUserDetailsData,
  UpdateUserDetailsResponse,
  UpdateUserPrivilegeData,
  UpdateUserPrivilegeResponse,
  GetUserByIdData,
  GetUserByIdResponse,
  DeleteUserPrivilegeData,
  DeleteUserPrivilegeResponse,
  UpdateUserPasswordData,
  UpdateUserPasswordResponse,
  GetUserResponse,
  DeleteUserResponse,
} from "./types.gen";

export class AlbumsService {
  /**
   * Get Albums
   * GET ALL ALBUMS
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns AlbumsPublic Successful Response
   * @throws ApiError
   */
  public static getAlbums(
    data: GetAlbumsData = {}
  ): CancelablePromise<GetAlbumsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/albums/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create Album
   * CREATE AN ALBUM
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AlbumPublic Successful Response
   * @throws ApiError
   */
  public static createAlbum(
    data: CreateAlbumData
  ): CancelablePromise<CreateAlbumResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/albums/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Album
   * GET ALL ALBUMS
   * @param data The data for the request.
   * @param data.id
   * @returns AlbumPublic Successful Response
   * @throws ApiError
   */
  public static getAlbum(
    data: GetAlbumData
  ): CancelablePromise<GetAlbumResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/albums/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Album
   * UPDATE AN ALBUM
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns AlbumPublic Successful Response
   * @throws ApiError
   */
  public static updateAlbum(
    data: UpdateAlbumData
  ): CancelablePromise<UpdateAlbumResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/sil/v1/albums/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Album
   * Delete an album
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteAlbum(
    data: DeleteAlbumData
  ): CancelablePromise<DeleteAlbumResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/sil/v1/albums/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class AllAlbumPhotosService {
  /**
   * Get All Album Photos
   * Get all photos for an album.
   * @param data The data for the request.
   * @param data.userId
   * @param data.albumId
   * @param data.skip
   * @param data.limit
   * @returns PhotosPublic Successful Response
   * @throws ApiError
   */
  public static getAllAlbumPhotos(
    data: GetAllAlbumPhotosData
  ): CancelablePromise<GetAllAlbumPhotosResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/{user_id}/albums/{album_id}/photos/",
      path: {
        user_id: data.userId,
        album_id: data.albumId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Photo Id
   * Get photo by ID.
   * @param data The data for the request.
   * @param data.userId
   * @param data.albumId
   * @param data.id
   * @returns PhotoPublic Successful Response
   * @throws ApiError
   */
  public static getPhotoId(
    data: GetPhotoIdData
  ): CancelablePromise<GetPhotoIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/{user_id}/albums/{album_id}/photos/{id}",
      path: {
        user_id: data.userId,
        album_id: data.albumId,
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class AllPhotosService {
  /**
   * Get All Photos
   * Get all photos for an album.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PhotosPublic Successful Response
   * @throws ApiError
   */
  public static getAllPhotos(
    data: GetAllPhotosData = {}
  ): CancelablePromise<GetAllPhotosResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/all_photos/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class HealthService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static check(): CancelablePromise<HealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/health/health-check/",
    });
  }
}

export class LoginService {
  /**
   * User Login Access Token
   * get access token
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static userLoginAccessToken(
    data: UserLoginAccessTokenData
  ): CancelablePromise<UserLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/login/authenticated_token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<TestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/login/test-access-token",
    });
  }
}

export class PhotosService {
 
  public static createPhoto(
    data: CreatePhotoData
  ): CancelablePromise<CreatePhotoResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/photos/",
      query: {
        album_id: data.albumId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get All Photos In An Album
   * Get all photos for an album.
   * @param data The data for the request.
   * @param data.albumId
   * @param data.skip
   * @param data.limit
   * @returns PhotosPublic Successful Response
   * @throws ApiError
   */
  public static getAllPhotosInAnAlbum(
    data: GetAllPhotosInAnAlbumData
  ): CancelablePromise<GetAllPhotosInAnAlbumResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/photos/",
      query: {
        album_id: data.albumId,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Photo
   * Get photo by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns PhotoPublic Successful Response
   * @throws ApiError
   */
  public static getPhoto(
    data: GetPhotoData
  ): CancelablePromise<GetPhotoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/photos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update Photo
   * Update an existing photo
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns PhotoPublic Successful Response
   * @throws ApiError
   */
  public static updatePhoto(
    data: UpdatePhotoData
  ): CancelablePromise<UpdatePhotoResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/sil/v1/photos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete Photo
   * Delete an album
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deletePhoto(
    data: DeletePhotoData
  ): CancelablePromise<DeletePhotoResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/sil/v1/photos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UserAlbumsService {
  /**
   * Get All User Albums
   * @param data The data for the request.
   * @param data.userId
   * @param data.skip
   * @param data.limit
   * @returns AlbumsPublic Successful Response
   * @throws ApiError
   */
  public static getAllUserAlbums(
    data: GetAllUserAlbumsData
  ): CancelablePromise<GetAllUserAlbumsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/{user_id}/album/",
      path: {
        user_id: data.userId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get Album Id
   * GET ALL ALBUMS
   * @param data The data for the request.
   * @param data.userId
   * @param data.id
   * @returns AlbumPublic Successful Response
   * @throws ApiError
   */
  public static getAlbumId(
    data: GetAlbumIdData
  ): CancelablePromise<GetAlbumIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/{user_id}/album/{id}",
      path: {
        user_id: data.userId,
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UsersService {
  /**
   * Get All Users
   * Get all users
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static getAllUsers(
    data: GetAllUsersData = {}
  ): CancelablePromise<GetAllUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create User
   * Get all users
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Create Account
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createAccount(
    data: CreateAccountData
  ): CancelablePromise<CreateAccountResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/sil/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update User Details
   * user their details.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserDetails(
    data: UpdateUserDetailsData
  ): CancelablePromise<UpdateUserDetailsResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/sil/v1/users/my_details",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update User Privilege
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserPrivilege(
    data: UpdateUserPrivilegeData
  ): CancelablePromise<UpdateUserPrivilegeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/sil/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get User By Id
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getUserById(
    data: GetUserByIdData
  ): CancelablePromise<GetUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Delete User Privilege
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserPrivilege(
    data: DeleteUserPrivilegeData
  ): CancelablePromise<DeleteUserPrivilegeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/sil/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Update User Password
   * Update Password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updateUserPassword(
    data: UpdateUserPasswordData
  ): CancelablePromise<UpdateUserPasswordResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/sil/v1/users/user/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Get User
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getUser(): CancelablePromise<GetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/sil/v1/users/user",
    });
  }

  /**
   * Delete User
   * Delete User Details
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/sil/v1/users/terminate_account",
    });
  }
}
